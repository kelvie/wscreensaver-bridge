use std::sync::{Arc, Mutex};

// This code was autogenerated with `dbus-codegen-rust -r --file org.freedesktop.ScreenSaver.xml`, see https://github.com/diwic/dbus-rs
// and then the methods were replaced with method_with_cr_async
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus_crossroads as crossroads;

use crate::OrgFreedesktopScreenSaverServer;

pub trait OrgFreedesktopScreenSaver {
    fn inhibit(
        &mut self,
        application_name: String,
        reason_for_inhibit: String,
    ) -> Result<(u32,), dbus::MethodErr>;
    fn un_inhibit(&mut self, cookie: u32) -> Result<(), dbus::MethodErr>;
}

pub fn register_org_freedesktop_screen_saver<T>(
    cr: &mut crossroads::Crossroads,
) -> crossroads::IfaceToken<T>
where
    T: OrgFreedesktopScreenSaver + Send + 'static,
{
    cr.register("org.freedesktop.ScreenSaver", |b| {
        b.method_with_cr_async(
            "Inhibit",
            ("application_name", "reason_for_inhibit"),
            ("cookie",),
            |mut ctx, cr, (application_name, reason_for_inhibit): (String, String)| {
                let d = cr.data_mut::<Arc<Mutex<OrgFreedesktopScreenSaverServer>>>(ctx.path());
                let mut d_clone = d.expect("Server data corrupted").clone();
                let application_name = application_name.clone();
                let reason_for_inhibit = reason_for_inhibit.clone();
                async move { ctx.reply(d_clone.inhibit(application_name, reason_for_inhibit)) }
            },
        );
        b.method_with_cr_async("UnInhibit", ("cookie",), (), |mut ctx, cr, (cookie,)| {
            let d = cr.data_mut::<Arc<Mutex<OrgFreedesktopScreenSaverServer>>>(ctx.path());
            let mut d_clone = d.expect("Server data corrupted").clone();
            async move { ctx.reply(d_clone.un_inhibit(cookie)) }
        });
    })
}
